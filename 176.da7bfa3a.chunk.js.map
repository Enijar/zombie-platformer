{"version":3,"file":"176.da7bfa3a.chunk.js","mappings":"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","sources":["webpack://@app/client/./src/game/config.ts","webpack://@app/client/./src/game/components/platform.tsx","webpack://@app/client/./src/config.ts","webpack://@app/client/./env.ts","webpack://@app/client/./src/game/components/camera.tsx","webpack://@app/client/./src/game/hooks/use-game.tsx","webpack://@app/client/./src/game/components/scene.tsx","webpack://@app/client/./src/game/components/zombie.tsx","webpack://@app/client/./src/game/components/player.tsx","webpack://@app/client/./src/game/game.tsx","webpack://@app/client/./src/pages/play/play.tsx"],"sourcesContent":["import * as THREE from \"three\";\nimport { Vector3, Euler } from \"@react-three/fiber\";\n\ntype Config = {\n  camera: {\n    position: Vector3;\n  };\n  scene: {\n    position: Vector3;\n    rotation: Euler;\n  };\n  platform: {\n    size: [width: number, height: number];\n  };\n};\n\nconst config: Config = {\n  camera: {\n    position: [0, 0, 5],\n  },\n  scene: {\n    position: [0, 0, 1],\n    rotation: [THREE.MathUtils.degToRad(-50), 0, 0],\n  },\n  platform: {\n    size: [2, 20],\n  },\n};\n\nexport default config;\n","import React from \"react\";\nimport * as THREE from \"three\";\nimport { useThree } from \"@react-three/fiber\";\nimport { useTexture } from \"@react-three/drei\";\n\ntype Props = {\n  size?: [width: number, height: number];\n};\n\nexport default function Platform({ size }: Props) {\n  const { gl } = useThree();\n\n  const texture = useTexture(\"./assets/platform/texture.png\", (texture) => {\n    const tex = texture as THREE.Texture;\n    tex.anisotropy = gl.capabilities.getMaxAnisotropy();\n    tex.minFilter = THREE.NearestFilter;\n    tex.magFilter = THREE.NearestFilter;\n    tex.wrapT = THREE.RepeatWrapping;\n    tex.wrapS = THREE.RepeatWrapping;\n    const scale = 4;\n    tex.repeat.set(size[0] * scale, size[1] * scale);\n  });\n\n  return (\n    <group>\n      <mesh>\n        <planeBufferGeometry args={size} />\n        <meshStandardMaterial map={texture} />\n      </mesh>\n    </group>\n  );\n}\n","import env from \"../env\";\n\nexport default {\n  debug: env.debug,\n};\n","export default {\n  debug: false,\n};\n","import React from \"react\";\nimport { Vector3 } from \"@react-three/fiber\";\nimport { OrbitControls, PerspectiveCamera } from \"@react-three/drei\";\nimport config from \"@/config\";\n\ntype Props = {\n  position?: Vector3;\n};\n\nexport default function Camera({ position }: Props) {\n  return (\n    <>\n      <PerspectiveCamera makeDefault position={position} />\n      {config.debug && <OrbitControls makeDefault />}\n    </>\n  );\n}\n","import create from \"zustand\";\n\ntype UseGame = {\n  speed: number;\n};\n\nexport const useGame = create<UseGame>(() => {\n  return {\n    speed: 0.01,\n  };\n});\n","import React from \"react\";\nimport * as THREE from \"three\";\nimport { Vector3, Euler, useFrame } from \"@react-three/fiber\";\nimport { useGame } from \"@/game/hooks/use-game\";\nimport config from \"@/game/config\";\n\ntype Props = {\n  position?: Vector3;\n  rotation?: Euler;\n  children?: React.ReactNode;\n};\n\nexport default function Scene({ position, rotation, children }: Props) {\n  const groupRef = React.useRef<THREE.Group>(null);\n\n  const speed = useGame((state) => state.speed);\n\n  useFrame(() => {\n    const group = groupRef.current;\n    if (group === null) return;\n    const min = config.platform.size[1] * -0.25;\n    group.position.y -= speed;\n    if (group.position.y <= min) {\n      group.position.y = 0;\n    }\n  });\n\n  return (\n    <group rotation={rotation}>\n      <group position={position}>\n        <group ref={groupRef}>{children}</group>\n      </group>\n    </group>\n  );\n}\n","import React from \"react\";\nimport * as THREE from \"three\";\nimport { GLTF } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { useFrame, Vector3 } from \"@react-three/fiber\";\nimport { useGLTF } from \"@react-three/drei\";\n\ntype GLTFResult = GLTF & {\n  nodes: {\n    Beta_Joints: THREE.SkinnedMesh;\n    Beta_Surface: THREE.SkinnedMesh;\n    mixamorigHips: THREE.Bone;\n  };\n  materials: {\n    Beta_Joints_MAT: THREE.MeshStandardMaterial;\n    [\"asdf1:Beta_HighLimbsGeoSG2\"]: THREE.MeshStandardMaterial;\n  };\n};\n\ntype Props = {\n  id: number;\n  position?: Vector3;\n};\n\nexport default function Zombie({ id, position }: Props) {\n  // @todo fix types\n  // @ts-ignore\n  const model = useGLTF(`./assets/zombies/${id}.glb`) as GLTFResult;\n\n  const groupRef = React.useRef<THREE.Group>();\n\n  const mixerRef = React.useRef<THREE.AnimationMixer>(null);\n\n  React.useEffect(() => {\n    mixerRef.current = new THREE.AnimationMixer(groupRef.current);\n    const walking = mixerRef.current.clipAction(model.animations[0]);\n    walking.repetitions = THREE.LoopRepeat;\n    walking.play();\n  }, [model.animations]);\n\n  useFrame(() => {\n    mixerRef.current.update(30 / 1000);\n  });\n\n  return (\n    <group position={position}>\n      <group rotation={[THREE.MathUtils.degToRad(90), 0, 0]}>\n        <group scale={0.3}>\n          <group ref={groupRef}>\n            <primitive object={model.nodes.mixamorigHips} />\n            <skinnedMesh\n              name=\"Beta_Joints\"\n              geometry={model.nodes.Beta_Joints.geometry}\n              material={model.materials.Beta_Joints_MAT}\n              skeleton={model.nodes.Beta_Joints.skeleton}\n            />\n            <skinnedMesh\n              name=\"Beta_Surface\"\n              geometry={model.nodes.Beta_Surface.geometry}\n              material={model.materials[\"asdf1:Beta_HighLimbsGeoSG2\"]}\n              skeleton={model.nodes.Beta_Surface.skeleton}\n            />\n          </group>\n        </group>\n      </group>\n    </group>\n  );\n}\n","import React from \"react\";\nimport * as THREE from \"three\";\nimport { GLTF } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { Euler, useFrame, Vector3 } from \"@react-three/fiber\";\nimport { useGLTF } from \"@react-three/drei\";\n\ntype GLTFResult = GLTF & {\n  nodes: {\n    Beta_Joints: THREE.SkinnedMesh;\n    Beta_Surface: THREE.SkinnedMesh;\n    mixamorigHips: THREE.Bone;\n  };\n  materials: {\n    Beta_Joints_MAT: THREE.MeshStandardMaterial;\n    [\"asdf1:Beta_HighLimbsGeoSG2\"]: THREE.MeshStandardMaterial;\n  };\n};\n\ntype Props = {\n  position?: Vector3;\n};\n\nexport default function Player({ position }: Props) {\n  // @todo fix types\n  // @ts-ignore\n  const model = useGLTF(\"./assets/player/model.glb\") as GLTFResult;\n\n  const groupRef = React.useRef<THREE.Group>();\n\n  const mixerRef = React.useRef<THREE.AnimationMixer>(null);\n\n  React.useEffect(() => {\n    mixerRef.current = new THREE.AnimationMixer(groupRef.current);\n    const walking = mixerRef.current.clipAction(model.animations[0]);\n    walking.repetitions = THREE.LoopRepeat;\n    walking.play();\n  }, [model.animations]);\n\n  useFrame(() => {\n    mixerRef.current.update(15 / 1000);\n  });\n\n  return (\n    <group position={position}>\n      <group\n        rotation={[\n          THREE.MathUtils.degToRad(90),\n          THREE.MathUtils.degToRad(180),\n          0,\n        ]}\n      >\n        <group scale={0.3}>\n          <group ref={groupRef}>\n            <primitive object={model.nodes.mixamorigHips} />\n            <skinnedMesh\n              name=\"Beta_Joints\"\n              geometry={model.nodes.Beta_Joints.geometry}\n              material={model.materials.Beta_Joints_MAT}\n              skeleton={model.nodes.Beta_Joints.skeleton}\n            />\n            <skinnedMesh\n              name=\"Beta_Surface\"\n              geometry={model.nodes.Beta_Surface.geometry}\n              material={model.materials[\"asdf1:Beta_HighLimbsGeoSG2\"]}\n              skeleton={model.nodes.Beta_Surface.skeleton}\n            />\n          </group>\n        </group>\n      </group>\n    </group>\n  );\n}\n","import React from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport config from \"@/game/config\";\nimport Platform from \"@/game/components/platform\";\nimport Camera from \"@/game/components/camera\";\nimport Scene from \"@/game/components/scene\";\nimport Zombie from \"@/game/components/zombie\";\nimport Player from \"@/game/components/player\";\n\nexport default function Game() {\n  return (\n    <Canvas flat linear dpr={1}>\n      <React.Suspense fallback={<></>}>\n        <Scene\n          position={config.scene.position}\n          rotation={config.scene.rotation}\n        >\n          <Zombie id={1} position={[0.75, 0, 0]} />\n          <Platform size={config.platform.size} />\n        </Scene>\n        <group\n          position={config.scene.position}\n          rotation={config.scene.rotation}\n        >\n          <Player position={[0, -1.5, 0.35]} />\n        </group>\n        <Camera position={config.camera.position} />\n        <ambientLight />\n        <pointLight position={[0, 5, 5]} />\n      </React.Suspense>\n    </Canvas>\n  );\n}\n","import React from \"react\";\nimport Game from \"@/game/game\";\n\nexport default function Play() {\n  return (\n    <main>\n      <Game />\n    </main>\n  );\n}\n"],"names":["camera","position","scene","rotation","THREE","platform","size","Platform","gl","useThree","texture","useTexture","tex","anisotropy","capabilities","getMaxAnisotropy","minFilter","magFilter","wrapT","wrapS","repeat","set","args","map","Camera","PerspectiveCamera","makeDefault","config","OrbitControls","useGame","create","speed","Scene","children","groupRef","React","state","useFrame","group","current","min","y","ref","Zombie","id","model","useGLTF","mixerRef","walking","clipAction","animations","repetitions","play","update","scale","object","nodes","mixamorigHips","name","geometry","Beta_Joints","material","materials","Beta_Joints_MAT","skeleton","Beta_Surface","Player","Game","flat","linear","dpr","fallback","Play"],"sourceRoot":""}